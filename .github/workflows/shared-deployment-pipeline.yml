name: release-solution-to-prod-reusable
# Reusable workflow for deploying managed solutions from source control
# Deploy managed solutions directly from source control to TEST, UAT, and PRODUCTION environments
on:
  workflow_call:
    inputs: 
      solution_name:
        description: 'The solution name.'
        type: string
        required: true
      solution_outbound_folder:
        description: 'staging the unpacked solution folder before check-in *do not change*'
        type: string
        default: out/solutions/
      solution_source_folder: 
       description: 'folder name to be created and checked in *do not change*'
       type: string
       default: solutions/
      upgrade_mode:
        description: 'Deployment mode: "update" (default) or "upgrade" (removes deleted components)'
        type: string
        default: 'update'
      target_environment:
        description: 'Which environment to deploy to: TEST, UAT, PRODUCTION, or ALL'
        type: string
        default: 'ALL'
    secrets:
      envSecret:
        description: 'The secret value for authentication using SPN'
        required: true

jobs:
  prepare-managed-solution:
    runs-on: windows-latest
    env:
      RUNNER_DEBUG: 1

    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true

    - name: Install Power Platform CLI
      uses: microsoft/powerplatform-actions/actions-install@v1

    - name: Verify managed solution exists in source control
      run: |
        $managedPath = "${{ inputs.solution_source_folder }}/${{ inputs.solution_name }}/managed"
        if (-not (Test-Path $managedPath)) {
          Write-Error "‚ùå DEPLOYMENT FAILED: Managed solution folder not found at: $managedPath"
          Write-Host "Available folders:"
          Get-ChildItem "${{ inputs.solution_source_folder }}/${{ inputs.solution_name }}/" -Directory -ErrorAction SilentlyContinue | ForEach-Object { Write-Host "  - $($_.Name)" }
          Write-Host ""
          Write-Host "üí° To fix this issue:"
          Write-Host "   1. Run the export workflow to export managed solution from DEV environment"
          Write-Host "   2. Ensure the export includes managed solution output"
          Write-Host "   3. Verify the managed solution is committed to source control"
          exit 1
        }
        Write-Host "‚úÖ Managed solution folder found at: $managedPath"

    - name: Pack managed solution from source control
      uses: microsoft/powerplatform-actions/pack-solution@v1
      with:
        solution-folder: ${{ inputs.solution_source_folder}}/${{ inputs.solution_name }}/managed
        solution-file: ${{ inputs.solution_outbound_folder}}/${{ inputs.solution_name }}_managed.zip
        solution-type: Managed

  deploy-to-test:
    if: inputs.target_environment == 'TEST' || inputs.target_environment == 'ALL'
    needs: [ prepare-managed-solution ]
    runs-on: windows-latest
    environment: 
      name: TEST
      url: ${{ vars.ENVIRONMENT_URL }}
    env:
      RUNNER_DEBUG: 1

    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true

    - name: Deploy solution to TEST environment
      uses: ./.github/actions/deploy-solution
      with:
        environment-url: ${{ vars.ENVIRONMENT_URL }}
        client-id: ${{ vars.CLIENT_ID }}
        client-secret: ${{ secrets.envSecret }}
        tenant-id: ${{ vars.TENANT_ID }}
        solution-name: ${{ inputs.solution_name }}
        solution-source-folder: ${{ inputs.solution_source_folder }}
        solution-outbound-folder: ${{ inputs.solution_outbound_folder }}
        upgrade-mode: ${{ inputs.upgrade_mode }}

  deploy-to-uat:
    if: inputs.target_environment == 'UAT' || inputs.target_environment == 'ALL'
    needs: [ prepare-managed-solution, deploy-to-test ]
    runs-on: windows-latest
    environment: 
      name: UAT
      url: ${{ vars.ENVIRONMENT_URL }}
    env:
      RUNNER_DEBUG: 1

    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true

    - name: Deploy solution to UAT environment
      uses: ./.github/actions/deploy-solution
      with:
        environment-url: ${{ vars.ENVIRONMENT_URL }}
        client-id: ${{ vars.CLIENT_ID }}
        client-secret: ${{ secrets.envSecret }}
        tenant-id: ${{ vars.TENANT_ID }}
        solution-name: ${{ inputs.solution_name }}
        solution-source-folder: ${{ inputs.solution_source_folder }}
        solution-outbound-folder: ${{ inputs.solution_outbound_folder }}
        upgrade-mode: ${{ inputs.upgrade_mode }}

  deploy-to-production:
    if: inputs.target_environment == 'PRODUCTION' || inputs.target_environment == 'ALL'
    needs: [ prepare-managed-solution, deploy-to-uat ]
    runs-on: windows-latest
    environment: 
      name: PRODUCTION
      url: ${{ vars.ENVIRONMENT_URL }}
    env:
      RUNNER_DEBUG: 1

    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true

    - name: Deploy solution to PRODUCTION environment
      uses: ./.github/actions/deploy-solution
      with:
        environment-url: ${{ vars.ENVIRONMENT_URL }}
        client-id: ${{ vars.CLIENT_ID }}
        client-secret: ${{ secrets.envSecret }}
        tenant-id: ${{ vars.TENANT_ID }}
        solution-name: ${{ inputs.solution_name }}
        solution-source-folder: ${{ inputs.solution_source_folder }}
        solution-outbound-folder: ${{ inputs.solution_outbound_folder }}
        upgrade-mode: ${{ inputs.upgrade_mode }}