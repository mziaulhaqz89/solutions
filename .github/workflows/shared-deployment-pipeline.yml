name: release-solution-to-prod-reusable
# Reusable workflow
# convert solution to managed (using a build PowerPlatform environment for the conversion)
# upload the solution to the GitHub artifacts and deploy to the PROD environment
on:
  workflow_call:
    inputs: 
      #Do Not change these values
      #Values are set by the caller
      #caller sample: release-action-call.ymnl
      solution_name:
        description: 'The solution name.'
        type: string
      solution_shipping_folder:
        description: 'folder name for staging the exported solution *do not change*'        
        type: string
        default: out/exported/
      solution_outbound_folder:
        description: 'staging the unpacked solution folder before check-in *do not change*'
        type: string
        default: out/solutions/
      solution_source_folder: 
       description: 'folder name to be created and checked in *do not change*'
       type: string
       default: solutions/
      solution_release_folder:
       description: 'folder where the released binaries are going to be hosted *do not change*'
       type: string
       default: out/release
      upgrade_mode:
        description: 'Deployment mode: "update" (default) or "upgrade" (removes deleted components)'
        type: string
        default: 'update'
      target_environment:
        description: 'Which environment to deploy to: TEST, UAT, PRODUCTION, or ALL'
        type: string
        default: 'ALL'
    secrets:
      envSecret:
        description: 'The secret value for authentication using SPN'
        required: true

jobs:
  prepare-managed-solution:
    runs-on: windows-latest
    env:
      RUNNER_DEBUG: 1

    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true

    - name: Install Power Platform CLI
      uses: microsoft/powerplatform-actions/actions-install@v1

    - name: Pack solution from source control
      uses: microsoft/powerplatform-actions/pack-solution@v1
      with:
        solution-folder: ${{ inputs.solution_source_folder}}/${{ inputs.solution_name }}
        solution-file: ${{ inputs.solution_outbound_folder}}/${{ inputs.solution_name }}_unmanaged.zip
        solution-type: Unmanaged

    - name: Check if managed solution exists in exported folder
      id: check_managed
      run: |
        $managedPath = "${{ inputs.solution_source_folder }}/${{ inputs.solution_name }}/managed/${{ inputs.solution_name }}_managed.zip"
        if (Test-Path $managedPath) {
          echo "managed_exists=true" >> $env:GITHUB_OUTPUT
          Write-Host "Managed solution found at: $managedPath"
        } else {
          echo "managed_exists=false" >> $env:GITHUB_OUTPUT
          Write-Host "Managed solution not found at: $managedPath"
          Write-Host "Available files in managed folder:"
          Get-ChildItem "${{ inputs.solution_source_folder }}/${{ inputs.solution_name }}/managed/" -ErrorAction SilentlyContinue | ForEach-Object { Write-Host "  - $($_.Name)" }
        }

    # Only run solution checker on the managed solution from source control if it exists
    - name: Run Solution Checker on Managed Solution (from source control)
      if: steps.check_managed.outputs.managed_exists == 'true'
      uses: microsoft/powerplatform-actions/check-solution@v1
      with:
        path: ${{ inputs.solution_source_folder }}/${{ inputs.solution_name }}/managed/${{ inputs.solution_name }}_managed.zip

    - name: Upload Solution Checker Results
      uses: actions/upload-artifact@v4
      if: always() && steps.check_managed.outputs.managed_exists == 'true'
      with:
        name: managed-solution-checker-results-${{ inputs.solution_name }}
        path: |
          ${{ runner.temp }}/PowerAppsChecker/**/*
        retention-days: 30

  deploy-to-test:
    if: inputs.target_environment == 'TEST' || inputs.target_environment == 'ALL'
    needs: [ prepare-managed-solution ]
    runs-on: windows-latest
    environment: 
      name: TEST
      url: ${{ vars.ENVIRONMENT_URL }}
    env:
      RUNNER_DEBUG: 1

    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true

    - name: Deploy solution to TEST environment
      uses: ./.github/actions/deploy-solution
      with:
        environment-url: ${{ vars.ENVIRONMENT_URL }}
        client-id: ${{ vars.CLIENT_ID }}
        client-secret: ${{ secrets.envSecret }}
        tenant-id: ${{ vars.TENANT_ID }}
        solution-name: ${{ inputs.solution_name }}
        solution-source-folder: ${{ inputs.solution_source_folder }}
        upgrade-mode: ${{ inputs.upgrade_mode }}

  deploy-to-uat:
    if: inputs.target_environment == 'UAT' || inputs.target_environment == 'ALL'
    needs: [ prepare-managed-solution, deploy-to-test ]
    runs-on: windows-latest
    environment: 
      name: UAT
      url: ${{ vars.ENVIRONMENT_URL }}
    env:
      RUNNER_DEBUG: 1

    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true

    - name: Deploy solution to UAT environment
      uses: ./.github/actions/deploy-solution
      with:
        environment-url: ${{ vars.ENVIRONMENT_URL }}
        client-id: ${{ vars.CLIENT_ID }}
        client-secret: ${{ secrets.envSecret }}
        tenant-id: ${{ vars.TENANT_ID }}
        solution-name: ${{ inputs.solution_name }}
        solution-source-folder: ${{ inputs.solution_source_folder }}
        upgrade-mode: ${{ inputs.upgrade_mode }}

  deploy-to-production:
    if: inputs.target_environment == 'PRODUCTION' || inputs.target_environment == 'ALL'
    needs: [ prepare-managed-solution, deploy-to-uat ]
    runs-on: windows-latest
    environment: 
      name: PRODUCTION
      url: ${{ vars.ENVIRONMENT_URL }}
    env:
      RUNNER_DEBUG: 1

    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true

    - name: Deploy solution to PRODUCTION environment
      uses: ./.github/actions/deploy-solution
      with:
        environment-url: ${{ vars.ENVIRONMENT_URL }}
        client-id: ${{ vars.CLIENT_ID }}
        client-secret: ${{ secrets.envSecret }}
        tenant-id: ${{ vars.TENANT_ID }}
        solution-name: ${{ inputs.solution_name }}
        solution-source-folder: ${{ inputs.solution_source_folder }}
        upgrade-mode: ${{ inputs.upgrade_mode }}