name: Export Solution from Dev
# Export any solution from development environment

on:
  workflow_dispatch:
    inputs:
      solution_name:
        description: 'Enter the solution name to export (must match folder name in solutions/)'
        type: string
        required: true
        default: 'travelsolution'

permissions:
  contents: write

jobs:
  validate-solution:
    runs-on: ubuntu-latest
    outputs:
      solution_exists: ${{ steps.check.outputs.solution_exists }}
      environment_url: ${{ steps.config.outputs.environment_url }}
      client_id: ${{ steps.config.outputs.client_id }}
      tenant_id: ${{ steps.config.outputs.tenant_id }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check if solution exists
      id: check
      run: |
        SOLUTION_NAME="${{ github.event.inputs.solution_name }}"
        
        if [ -d "solutions/$SOLUTION_NAME" ]; then
          echo "✅ Solution folder 'solutions/$SOLUTION_NAME' exists"
          echo "solution_exists=true" >> $GITHUB_OUTPUT
        else
          echo "❌ Solution folder 'solutions/$SOLUTION_NAME' does not exist"
          echo "Available solutions:"
          ls -la solutions/ || echo "No solutions directory found"
          echo "solution_exists=false" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Read solution configuration
      id: config
      run: |
        SOLUTION_NAME="${{ github.event.inputs.solution_name }}"
        CONFIG_FILE="solutions-config.json"
        
        # Check if solution exists in config, if not use default environment
        if jq -e ".solutions.${SOLUTION_NAME}" $CONFIG_FILE > /dev/null; then
          ENV_URL=$(jq -r ".solutions.${SOLUTION_NAME}.environments.dev" $CONFIG_FILE)
          echo "Using environment from config: $ENV_URL"
        else
          echo "Solution not in config, using default dev environment"
          ENV_URL="https://mzhdev.crm4.dynamics.com"
        fi
        
        CLIENT_ID=$(jq -r ".common.client_id" $CONFIG_FILE)
        TENANT_ID=$(jq -r ".common.tenant_id" $CONFIG_FILE)
        
        echo "environment_url=$ENV_URL" >> $GITHUB_OUTPUT
        echo "client_id=$CLIENT_ID" >> $GITHUB_OUTPUT
        echo "tenant_id=$TENANT_ID" >> $GITHUB_OUTPUT

  export-solution:
    needs: validate-solution
    if: needs.validate-solution.outputs.solution_exists == 'true'
    runs-on: windows-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        lfs: true

    - name: Install Power Platform CLI
      uses: microsoft/powerplatform-actions/actions-install@v1

    - name: Who am I action
      uses: microsoft/powerplatform-actions/who-am-i@v1
      with:
        environment-url: ${{ needs.validate-solution.outputs.environment_url }}
        app-id: ${{ needs.validate-solution.outputs.client_id }}
        client-secret: ${{ secrets.PowerPlatformSPN }}
        tenant-id: ${{ needs.validate-solution.outputs.tenant_id }}

    - name: Export solution action
      uses: microsoft/powerplatform-actions/export-solution@v1
      with:
        environment-url: ${{ needs.validate-solution.outputs.environment_url }}
        app-id: ${{ needs.validate-solution.outputs.client_id }}
        client-secret: ${{ secrets.PowerPlatformSPN }}
        tenant-id: ${{ needs.validate-solution.outputs.tenant_id }}
        solution-name: ${{ github.event.inputs.solution_name }}
        solution-output-file: out/exported/${{ github.event.inputs.solution_name }}.zip

    - name: Unpack solution action
      uses: microsoft/powerplatform-actions/unpack-solution@v1
      with:
        solution-file: out/exported/${{ github.event.inputs.solution_name }}.zip
        solution-folder: out/solutions/${{ github.event.inputs.solution_name }}
        solution-type: 'Unmanaged'
        overwrite-files: true

    - name: Branch solution, prepare it for a Pull Request
      uses: microsoft/powerplatform-actions/branch-solution@v1
      with:
        solution-folder: out/solutions/${{ github.event.inputs.solution_name }}
        solution-target-folder: solutions/${{ github.event.inputs.solution_name }}
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        allow-empty-commit: true

    - name: Create export summary
      run: |
        echo "## 📦 Solution Export Completed" >> $env:GITHUB_STEP_SUMMARY
        echo "" >> $env:GITHUB_STEP_SUMMARY
        echo "**Solution**: ${{ github.event.inputs.solution_name }}" >> $env:GITHUB_STEP_SUMMARY
        echo "**Source Environment**: ${{ needs.validate-solution.outputs.environment_url }}" >> $env:GITHUB_STEP_SUMMARY
        echo "**Target Folder**: solutions/${{ github.event.inputs.solution_name }}" >> $env:GITHUB_STEP_SUMMARY
        echo "**Status**: ✅ Successfully exported and unpacked" >> $env:GITHUB_STEP_SUMMARY
        echo "" >> $env:GITHUB_STEP_SUMMARY
        echo "💡 **Next Steps**: Review the changes and create a Pull Request to merge to main" >> $env:GITHUB_STEP_SUMMARY
