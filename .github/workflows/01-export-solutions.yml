name: 01-Export Power Platform Solution
# Export solution from DEV environment, unpack it and create a branch with the changes
# Supports multiple solutions: travelsolution, coffeeshopsolution

run-name: 01-Export Power Platform Solution - ${{ inputs.solution_name }}

on:
  workflow_dispatch:
    inputs:
      # Select the solution to export
      solution_name:
        description: 'Select the solution to export from Power Platform'
        required: true
        type: choice
        options:
          - core
          - travelsolution
          - coffeeshop
      # Optional custom branch name
      custom_branch_name:
        description: 'Custom branch name (optional - leave empty for auto-generated)'
        required: false
        type: string
      #Do Not change these values
      solution_exported_folder:
        description: 'folder name for staging the exported solution *do not change*'
        required: true
        default: out/exported/
      solution_folder:
        description: 'staging the unpacked solution folder before check-in *do not change*'
        required: true
        default: out/solutions/
      solution_target_folder:
        description: 'folder name to be created and checked in *do not change*'
        required: true
        default: solutions/
        
permissions:
  contents: write
  pull-requests: write
jobs:
  export-from-dev:
    runs-on: windows-latest
    environment: DEV
    # or you can say runs-on: ubuntu-latest
    env:
      RUNNER_DEBUG: 1

    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true

    - name: Install Power Platform CLI
      uses: microsoft/powerplatform-actions/actions-install@v1

    - name: who-am-i action
      uses: microsoft/powerplatform-actions/who-am-i@v1
      with:
        environment-url: ${{ vars.ENVIRONMENT_URL }}
        app-id: ${{ vars.CLIENT_ID }}
        client-secret: ${{ secrets.PowerPlatformSPN }}
        tenant-id: ${{ vars.TENANT_ID }}

    - name: Get Current Solution Version and Increment
      id: version
      run: |
        # Check current authentication status
        Write-Host "Checking authentication status..."
        $authOutput = & $env:POWERPLATFORMTOOLS_PACPATH auth list
        Write-Host "Auth status: $authOutput"
        
        # If no authentication is found, authenticate using the same credentials as who-am-i
        if ($LASTEXITCODE -ne 0 -or $authOutput -like "*No profiles*") {
          Write-Host "No authentication found, creating auth profile..."
          & $env:POWERPLATFORMTOOLS_PACPATH auth create --environment ${{ vars.ENVIRONMENT_URL }} --applicationId ${{ vars.CLIENT_ID }} --clientSecret ${{ secrets.PowerPlatformSPN }} --tenant ${{ vars.TENANT_ID }}
          
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Authentication failed with exit code: $LASTEXITCODE"
            exit 1
          }
        }
        
        # Get current solution list in JSON format
        Write-Host "Getting solution list..."
        $output = & $env:POWERPLATFORMTOOLS_PACPATH solution list --json --environment ${{ vars.ENVIRONMENT_URL }}
        
        # Check if pac command succeeded
        if ($LASTEXITCODE -ne 0) {
          Write-Host "PAC command failed with exit code: $LASTEXITCODE"
          Write-Host "Output: $output"
          exit 1
        }
        
        # Debug: Show raw output
        Write-Host "Raw PAC output:"
        Write-Host $output
        
        # Parse JSON and find the specific solution
        $solutions = $output | ConvertFrom-Json
        $currentSolution = $solutions | Where-Object { $_.SolutionUniqueName -eq "${{ github.event.inputs.solution_name }}" }
        
        # Check if solution was found
        if (-not $currentSolution) {
          Write-Host "Solution '${{ github.event.inputs.solution_name }}' not found in environment"
          Write-Host "Available solutions:"
          $solutions | ForEach-Object { Write-Host "  - $($_.SolutionUniqueName)" }
          exit 1
        }
        
        # Get current version
        $currentVersion = $currentSolution.VersionNumber
        Write-Host "Current version found: $currentVersion"
        
        # Parse version numbers (format: major.minor.build.revision)
        $versionParts = $currentVersion.Split('.')
        $major = [int]$versionParts[0]
        $minor = [int]$versionParts[1] 
        $build = [int]$versionParts[2]
        $revision = [int]$versionParts[3]
        
        # Increment revision number
        $revision++
        $newVersion = "$major.$minor.$build.$revision"
        
        echo "number=$newVersion" >> $env:GITHUB_OUTPUT
        Write-Host "New version will be: $newVersion"

    - name: Set Online Solution Version
      uses: microsoft/powerplatform-actions/set-online-solution-version@v1
      with:
        environment-url: ${{ vars.ENVIRONMENT_URL }}
        app-id: ${{ vars.CLIENT_ID }}
        client-secret: ${{ secrets.PowerPlatformSPN }}
        tenant-id: ${{ vars.TENANT_ID }}
        name: ${{ github.event.inputs.solution_name }}
        version: ${{ steps.version.outputs.number }}

    - name: export-solution action (unmanaged)
      uses: microsoft/powerplatform-actions/export-solution@v1
      with:
        environment-url: ${{ vars.ENVIRONMENT_URL }}
        app-id: ${{ vars.CLIENT_ID }}
        client-secret: ${{ secrets.PowerPlatformSPN }}
        tenant-id: ${{ vars.TENANT_ID }}
        solution-name: ${{ github.event.inputs.solution_name }}
        solution-output-file: ${{ github.event.inputs.solution_exported_folder}}/${{ github.event.inputs.solution_name }}_unmanaged.zip
        
    - name: export-solution action (managed)
      uses: microsoft/powerplatform-actions/export-solution@v1
      with:
        environment-url: ${{ vars.ENVIRONMENT_URL }}
        app-id: ${{ vars.CLIENT_ID }}
        client-secret: ${{ secrets.PowerPlatformSPN }}
        tenant-id: ${{ vars.TENANT_ID }}
        solution-name: ${{ github.event.inputs.solution_name }}
        managed: true
        solution-output-file: ${{ github.event.inputs.solution_exported_folder}}/${{ github.event.inputs.solution_name }}_managed.zip

    - name: unpack-solution action (unmanaged)
      uses: microsoft/powerplatform-actions/unpack-solution@v1
      with:
        solution-file: ${{ github.event.inputs.solution_exported_folder}}/${{ github.event.inputs.solution_name }}_unmanaged.zip
        solution-folder: ${{ github.event.inputs.solution_target_folder}}/${{ github.event.inputs.solution_name }}/unmanaged
        solution-type: 'Unmanaged'
        overwrite-files: true

    - name: unpack-solution action (managed)
      uses: microsoft/powerplatform-actions/unpack-solution@v1
      with:
        solution-file: ${{ github.event.inputs.solution_exported_folder}}/${{ github.event.inputs.solution_name }}_managed.zip
        solution-folder: ${{ github.event.inputs.solution_target_folder}}/${{ github.event.inputs.solution_name }}/managed
        solution-type: 'Managed'
        overwrite-files: true

    - name: Run Solution Checker
      uses: microsoft/powerplatform-actions/check-solution@v1
      with:
        environment-url: ${{ vars.ENVIRONMENT_URL }}
        app-id: ${{ vars.CLIENT_ID }}
        client-secret: ${{ secrets.PowerPlatformSPN }}
        tenant-id: ${{ vars.TENANT_ID }}
        path: ${{ github.event.inputs.solution_exported_folder}}/${{ github.event.inputs.solution_name }}_managed.zip

    - name: Upload Solution Checker Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: solution-checker-results-${{ github.event.inputs.solution_name }}
        path: |
          ${{ runner.temp }}/PowerAppsChecker/**/*
        retention-days: 30

    - name: Analyze Solution Dependencies
      id: dependencies
      run: |
        Write-Host "=== SOLUTION DEPENDENCY ANALYSIS ==="
        Write-Host "Analyzing solution: ${{ github.event.inputs.solution_name }}"
        Write-Host ""
        
        $solutionXmlPath = "${{ github.event.inputs.solution_target_folder}}/${{ github.event.inputs.solution_name }}/unmanaged/Other/Solution.xml"
        
        if (-not (Test-Path $solutionXmlPath)) {
          Write-Host "‚ö†Ô∏è  Warning: Could not find Solution.xml at $solutionXmlPath"
          exit 0
        }
        
        Write-Host "Reading solution dependencies from: $solutionXmlPath"
        [xml]$solutionXml = Get-Content $solutionXmlPath
        
        $solutionUniqueName = $solutionXml.ImportExportXml.SolutionManifest.UniqueName
        $solutionVersion = $solutionXml.ImportExportXml.SolutionManifest.Version
        Write-Host "Solution: $solutionUniqueName v$solutionVersion"
        Write-Host ""
        
        # Check for explicit dependencies
        $dependencies = $solutionXml.ImportExportXml.SolutionManifest.Dependencies.Dependency
        Write-Host "üìã EXPLICIT DEPENDENCIES:"
        if ($dependencies) {
          if ($dependencies.Count) {
            foreach ($dep in $dependencies) {
              $depName = $dep.solution
              $depVersion = $dep.version
              Write-Host "  ‚úÖ $depName (v$depVersion)"
            }
          } else {
            $depName = $dependencies.solution
            $depVersion = $dependencies.version
            Write-Host "  ‚úÖ $depName (v$depVersion)"
          }
        } else {
          Write-Host "  ‚ÑπÔ∏è  No explicit dependencies declared"
        }
        Write-Host ""
        
        # Check for missing dependencies (implicit dependencies that may cause deployment issues)
        $missingDeps = $solutionXml.ImportExportXml.SolutionManifest.MissingDependencies.MissingDependency
        Write-Host "‚ö†Ô∏è  MISSING/IMPLICIT DEPENDENCIES:"
        if ($missingDeps) {
          Write-Host "  Found $($missingDeps.Count) missing dependencies that may cause deployment issues:"
          Write-Host ""
          
          $uniqueSolutions = @{}
          
          foreach ($missing in $missingDeps) {
            $requiredSolution = $missing.Required.solution
            $requiredType = $missing.Required.type
            $requiredDisplay = $missing.Required.displayName
            $dependentDisplay = $missing.Dependent.displayName
            
            if ($requiredSolution -and $requiredSolution -ne "Active") {
              if (-not $uniqueSolutions.ContainsKey($requiredSolution)) {
                $package = $missing.Required.package
                if ($package) {
                  $packageName = $package.appName
                  $packageVersion = $package.version
                  Write-Host "    üî¥ REQUIRED: $requiredSolution"
                  Write-Host "       Package: $packageName v$packageVersion"
                  Write-Host "       Needed by: $dependentDisplay"
                  Write-Host ""
                  $uniqueSolutions[$requiredSolution] = $packageName
                } else {
                  Write-Host "    üî¥ REQUIRED: $requiredSolution"
                  Write-Host "       Type: $requiredType"
                  Write-Host "       Needed by: $dependentDisplay"
                  Write-Host ""
                  $uniqueSolutions[$requiredSolution] = "Unknown"
                }
              }
            } else {
              Write-Host "    üü° COMPONENT: $requiredDisplay (Type: $requiredType)"
              Write-Host "       Needed by: $dependentDisplay"
              Write-Host ""
            }
          }
          
          Write-Host "üìã DEPLOYMENT REQUIREMENTS SUMMARY:"
          Write-Host "Before deploying this solution to target environments, ensure these solutions/packages are installed:"
          foreach ($sol in $uniqueSolutions.Keys) {
            $package = $uniqueSolutions[$sol]
            Write-Host "  ‚Ä¢ $sol ($package)"
          }
          
          # Create dependency artifact for deployment pipeline
          $dependencyInfo = @{
            solutionName = $solutionUniqueName
            solutionVersion = $solutionVersion
            exportedAt = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss UTC")
            explicitDependencies = @()
            missingDependencies = @()
          }
          
          if ($dependencies) {
            if ($dependencies.Count) {
              foreach ($dep in $dependencies) {
                $dependencyInfo.explicitDependencies += @{
                  solution = $dep.solution
                  version = $dep.version
                }
              }
            } else {
              $dependencyInfo.explicitDependencies += @{
                solution = $dependencies.solution
                version = $dependencies.version
              }
            }
          }
          
          foreach ($sol in $uniqueSolutions.Keys) {
            $dependencyInfo.missingDependencies += @{
              solution = $sol
              package = $uniqueSolutions[$sol]
            }
          }
          
          # Save dependency info as JSON for deployment pipeline
          $dependencyJson = $dependencyInfo | ConvertTo-Json -Depth 3
          $dependencyPath = "${{ github.event.inputs.solution_exported_folder}}/dependencies-${{ github.event.inputs.solution_name }}.json"
          New-Item -Path (Split-Path $dependencyPath) -ItemType Directory -Force -ErrorAction SilentlyContinue
          $dependencyJson | Out-File -FilePath $dependencyPath -Encoding UTF8
          
          Write-Host ""
          Write-Host "üíæ Dependency information saved to: $dependencyPath"
          
        } else {
          Write-Host "  ‚úÖ No missing dependencies detected"
        }
        
        Write-Host ""
        Write-Host "=== NEXT STEPS ==="
        Write-Host "1. Review solution checker results for quality issues"
        Write-Host "2. Ensure target environments have required dependencies installed"
        Write-Host "3. Deploy dependencies before deploying this solution"
        Write-Host "4. Monitor deployment logs for dependency-related errors"

    - name: Upload Dependencies Analysis
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependencies-${{ github.event.inputs.solution_name }}
        path: |
          ${{ github.event.inputs.solution_exported_folder}}/dependencies-*.json
        retention-days: 30
      
    - name: Generate timestamp for branch name
      id: timestamp
      run: |
        $timestamp = Get-Date -Format "yyyyMMdd-HHmm"
        echo "value=$timestamp" >> $env:GITHUB_OUTPUT

    - name: Generate branch name for PR
      id: branch-name
      run: |
        if ("${{ github.event.inputs.custom_branch_name }}" -ne "") {
          $branchName = "${{ github.event.inputs.custom_branch_name }}"
        } else {
          $branchName = "${{ github.event.inputs.solution_name }}-by-${{ github.actor }}-${{ steps.timestamp.outputs.value }}"
        }
        echo "value=$branchName" >> $env:GITHUB_OUTPUT
        Write-Host "Branch name: $branchName"

    - name: branch-solution, prepare it for a PullRequest
      uses: microsoft/powerplatform-actions/branch-solution@v1
      with:
        solution-folder: ${{ github.event.inputs.solution_target_folder}}/${{ github.event.inputs.solution_name }}
        solution-target-folder: ${{ github.event.inputs.solution_target_folder}}/${{ github.event.inputs.solution_name }}
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        allow-empty-commit: true
        branch-name: ${{ steps.branch-name.outputs.value }}
        clobber-branch: true