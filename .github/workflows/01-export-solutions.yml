name: 01-Export Power Platform Solution
# Export solution from DEV environment, unpack it and create a branch with the changes
# Supports multiple solutions: travelsolution, coffeeshopsolution

run-name: 01-Export Power Platform Solution - ${{ inputs.solution_name }}

on:
  workflow_dispatch:
    inputs:
      # Select the solution to export
      solution_name:
        description: 'Select the solution to export from Power Platform'
        required: true
        type: choice
        options:
          - core
          - travelsolution
          - coffeeshop
      # Optional custom branch name
      custom_branch_name:
        description: 'Custom branch name (optional - leave empty for auto-generated)'
        required: false
        type: string
      #Do Not change these values
      solution_exported_folder:
        description: 'folder name for staging the exported solution *do not change*'
        required: true
        default: out/exported/
      solution_folder:
        description: 'staging the unpacked solution folder before check-in *do not change*'
        required: true
        default: out/solutions/
      solution_target_folder:
        description: 'folder name to be created and checked in *do not change*'
        required: true
        default: solutions/
        
permissions:
  contents: write
  pull-requests: write
jobs:
  export-from-dev:
    runs-on: windows-latest
    environment: DEV
    # or you can say runs-on: ubuntu-latest
    env:
      RUNNER_DEBUG: 1

    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true

    - name: Install Power Platform CLI
      uses: microsoft/powerplatform-actions/actions-install@v1

    - name: who-am-i action
      uses: microsoft/powerplatform-actions/who-am-i@v1
      with:
        environment-url: ${{ vars.ENVIRONMENT_URL }}
        app-id: ${{ vars.CLIENT_ID }}
        client-secret: ${{ secrets.PowerPlatformSPN }}
        tenant-id: ${{ vars.TENANT_ID }}

    - name: Get Current Solution Version and Increment
      id: version
      run: |
        # Check current authentication status
        Write-Host "Checking authentication status..."
        $authOutput = & $env:POWERPLATFORMTOOLS_PACPATH auth list
        Write-Host "Auth status: $authOutput"
        
        # If no authentication is found, authenticate using the same credentials as who-am-i
        if ($LASTEXITCODE -ne 0 -or $authOutput -like "*No profiles*") {
          Write-Host "No authentication found, creating auth profile..."
          & $env:POWERPLATFORMTOOLS_PACPATH auth create --environment ${{ vars.ENVIRONMENT_URL }} --applicationId ${{ vars.CLIENT_ID }} --clientSecret ${{ secrets.PowerPlatformSPN }} --tenant ${{ vars.TENANT_ID }}
          
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Authentication failed with exit code: $LASTEXITCODE"
            exit 1
          }
        }
        
        # Get current solution list in JSON format
        Write-Host "Getting solution list..."
        $output = & $env:POWERPLATFORMTOOLS_PACPATH solution list --json --environment ${{ vars.ENVIRONMENT_URL }}
        
        # Check if pac command succeeded
        if ($LASTEXITCODE -ne 0) {
          Write-Host "PAC command failed with exit code: $LASTEXITCODE"
          Write-Host "Output: $output"
          exit 1
        }
        
        # Debug: Show raw output
        Write-Host "Raw PAC output:"
        Write-Host $output
        
        # Parse JSON and find the specific solution
        $solutions = $output | ConvertFrom-Json
        $currentSolution = $solutions | Where-Object { $_.SolutionUniqueName -eq "${{ github.event.inputs.solution_name }}" }
        
        # Check if solution was found
        if (-not $currentSolution) {
          Write-Host "Solution '${{ github.event.inputs.solution_name }}' not found in environment"
          Write-Host "Available solutions:"
          $solutions | ForEach-Object { Write-Host "  - $($_.SolutionUniqueName)" }
          exit 1
        }
        
        # Get current version
        $currentVersion = $currentSolution.VersionNumber
        Write-Host "Current version found: $currentVersion"
        
        # Parse version numbers (format: major.minor.build.revision)
        $versionParts = $currentVersion.Split('.')
        $major = [int]$versionParts[0]
        $minor = [int]$versionParts[1] 
        $build = [int]$versionParts[2]
        $revision = [int]$versionParts[3]
        
        # Increment revision number
        $revision++
        $newVersion = "$major.$minor.$build.$revision"
        
        echo "number=$newVersion" >> $env:GITHUB_OUTPUT
        Write-Host "New version will be: $newVersion"

    - name: Set Online Solution Version
      uses: microsoft/powerplatform-actions/set-online-solution-version@v1
      with:
        environment-url: ${{ vars.ENVIRONMENT_URL }}
        app-id: ${{ vars.CLIENT_ID }}
        client-secret: ${{ secrets.PowerPlatformSPN }}
        tenant-id: ${{ vars.TENANT_ID }}
        name: ${{ github.event.inputs.solution_name }}
        version: ${{ steps.version.outputs.number }}

    - name: export-solution action (unmanaged)
      uses: microsoft/powerplatform-actions/export-solution@v1
      with:
        environment-url: ${{ vars.ENVIRONMENT_URL }}
        app-id: ${{ vars.CLIENT_ID }}
        client-secret: ${{ secrets.PowerPlatformSPN }}
        tenant-id: ${{ vars.TENANT_ID }}
        solution-name: ${{ github.event.inputs.solution_name }}
        solution-output-file: ${{ github.event.inputs.solution_exported_folder}}/${{ github.event.inputs.solution_name }}_unmanaged.zip
        
    - name: export-solution action (managed)
      uses: microsoft/powerplatform-actions/export-solution@v1
      with:
        environment-url: ${{ vars.ENVIRONMENT_URL }}
        app-id: ${{ vars.CLIENT_ID }}
        client-secret: ${{ secrets.PowerPlatformSPN }}
        tenant-id: ${{ vars.TENANT_ID }}
        solution-name: ${{ github.event.inputs.solution_name }}
        managed: true
        solution-output-file: ${{ github.event.inputs.solution_exported_folder}}/${{ github.event.inputs.solution_name }}_managed.zip

    - name: unpack-solution action (unmanaged)
      uses: microsoft/powerplatform-actions/unpack-solution@v1
      with:
        solution-file: ${{ github.event.inputs.solution_exported_folder}}/${{ github.event.inputs.solution_name }}_unmanaged.zip
        solution-folder: ${{ github.event.inputs.solution_target_folder}}/${{ github.event.inputs.solution_name }}/unmanaged
        solution-type: 'Unmanaged'
        overwrite-files: true

    - name: unpack-solution action (managed)
      uses: microsoft/powerplatform-actions/unpack-solution@v1
      with:
        solution-file: ${{ github.event.inputs.solution_exported_folder}}/${{ github.event.inputs.solution_name }}_managed.zip
        solution-folder: ${{ github.event.inputs.solution_target_folder}}/${{ github.event.inputs.solution_name }}/managed
        solution-type: 'Managed'
        overwrite-files: true

    - name: Run Solution Checker
      uses: microsoft/powerplatform-actions/check-solution@v1
      with:
        environment-url: ${{ vars.ENVIRONMENT_URL }}
        app-id: ${{ vars.CLIENT_ID }}
        client-secret: ${{ secrets.PowerPlatformSPN }}
        tenant-id: ${{ vars.TENANT_ID }}
        path: ${{ github.event.inputs.solution_exported_folder}}/${{ github.event.inputs.solution_name }}_managed.zip

    - name: Upload Solution Checker Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: solution-checker-results-${{ github.event.inputs.solution_name }}
        path: |
          ${{ runner.temp }}/PowerAppsChecker/**/*
        retention-days: 30
      
    - name: Generate timestamp for branch name
      id: timestamp
      run: |
        $timestamp = Get-Date -Format "yyyyMMdd-HHmm"
        echo "value=$timestamp" >> $env:GITHUB_OUTPUT

    - name: Generate branch name for PR
      id: branch-name
      run: |
        if ("${{ github.event.inputs.custom_branch_name }}" -ne "") {
          $branchName = "${{ github.event.inputs.custom_branch_name }}"
        } else {
          $branchName = "${{ github.event.inputs.solution_name }}-by-${{ github.actor }}-${{ steps.timestamp.outputs.value }}"
        }
        echo "value=$branchName" >> $env:GITHUB_OUTPUT
        Write-Host "Branch name: $branchName"

    - name: branch-solution, prepare it for a PullRequest
      uses: microsoft/powerplatform-actions/branch-solution@v1
      with:
        solution-folder: ${{ github.event.inputs.solution_target_folder}}/${{ github.event.inputs.solution_name }}
        solution-target-folder: ${{ github.event.inputs.solution_target_folder}}/${{ github.event.inputs.solution_name }}
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        allow-empty-commit: true
        branch-name: ${{ steps.branch-name.outputs.value }}
        clobber-branch: true